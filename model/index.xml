<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Model on</title><link>https://kubedl.io/model/</link><description>Recent content in Model on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://kubedl.io/model/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup</title><link>https://kubedl.io/model/setup/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/setup/</guid><description>KubeDL model uses Kaniko underneath to generate the image that incorporates the model artifacts.
Create Docker Credentials Docker credentials is also required for Kaniko to be able to push the image to docker registry: Below command creates a Kubernetes secret that contains the docker credentials.
kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username=&amp;lt;username&amp;gt; --docker-password=&amp;lt;password&amp;gt; --docker-email=&amp;lt;email&amp;gt; Replace username, password, email to your own.</description></item><item><title>Quick Start</title><link>https://kubedl.io/model/usage/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/usage/</guid><description>Create a ModelVersion from training job KubeDL training already supports generating a ModelVersion CRD when the job completes. Thus, a model image is automatically generated after job succeeds.
To enable this feature, the TensorFlow job spec needs to set the modelVersion field like the example below:
This example uses hostpath volume. The job will first generate the model artifacts under /kubedl-model inside the training container. Correspondingly, the model will be preset on the local host path /models/mymodel.</description></item><item><title>Introduction</title><link>https://kubedl.io/model/intro/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/intro/</guid><description>KubeDL Model tracks a model&amp;rsquo;s version and lineage in Kubernetes CRD. It leverages docker image to take versioning of a model. Each model version will generate a corresponding image that includes all the model artifacts.
KubeDL provides two CRDs Model and ModelVersion to accomplish this:
ModelVersion ModelVersion describes a model&amp;rsquo;s version, its location, who creates this model, the image repo for pushing the model and so on. The backend controller watches this CRD and uses Kaniko to generate a image that incorporates all the artifacts.</description></item><item><title>Model Storage</title><link>https://kubedl.io/model/storage/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/storage/</guid><description>KubeDL Model can support generate image out from different backend storage. It leverages Kaniko to mount the storage as a PersistentVolume into the container, and create an image that includes the model artifacts and push to the image registry. Check the full spec here.
Local Storage // LocalStorage defines the local host path for storing the model version. // For a distributed training job, the nodeName will be the node where the chief/master worker run to output the model.</description></item><item><title>Design</title><link>https://kubedl.io/model/design/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/design/</guid><description>This diagram illustrates the workflow from model generation to model deployment.
Workflow A ModelVersion CRD can be generated by a user manually or programmatically by a training job CRD. KubeDL training CRDs (Tensorflow and Pytorch) already integrates this. Check the CRD spec for Tensorflow Job and Pytorch Job.
The ModelVersion Controller watches the ModelVersion CRD and does the following steps.
Create a Model CRD, if not exists, and associate it with the corresponding ModelVersion CRDs.</description></item></channel></rss>